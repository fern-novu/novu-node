/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Novu } from "@fern-api/novu";
import urlJoin from "url-join";
import * as core from "../../../../core";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Environments {
    interface Options {
        environment: string;
    }
}

export class Environments {
    constructor(private readonly options: Environments.Options) {}

    public async environmentsControllerGetCurrentEnvironment(): Promise<Novu.EnvironmentResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/environments/me"),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.EnvironmentResponseDto.parseOrThrow(
                _response.body as serializers.EnvironmentResponseDto.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async environmentsControllerGetMyEnvironments(): Promise<Novu.EnvironmentResponseDto[]> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/environments"),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.environments.environmentsControllerGetMyEnvironments.Response.parseOrThrow(
                _response.body as serializers.environments.environmentsControllerGetMyEnvironments.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async environmentsControllerCreateEnvironment(request: Novu.CreateEnvironmentRequestDto): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/environments"),
            method: "POST",
            body: await serializers.CreateEnvironmentRequestDto.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async environmentsControllerUpdateMyEnvironment(
        environmentId: string,
        request: Novu.UpdateEnvironmentRequestDto
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/environments/${environmentId}`),
            method: "PUT",
            body: await serializers.UpdateEnvironmentRequestDto.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async environmentsControllerGetOrganizationApiKeys(): Promise<Novu.ApiKey[]> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/environments/api-keys"),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.environments.environmentsControllerGetOrganizationApiKeys.Response.parseOrThrow(
                _response.body as serializers.environments.environmentsControllerGetOrganizationApiKeys.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async environmentsControllerRegenerateOrganizationApiKeys(): Promise<Novu.ApiKey[]> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/environments/api-keys/regenerate"),
            method: "POST",
        });
        if (_response.ok) {
            return await serializers.environments.environmentsControllerRegenerateOrganizationApiKeys.Response.parseOrThrow(
                _response.body as serializers.environments.environmentsControllerRegenerateOrganizationApiKeys.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async environmentsControllerUpdateWidgetSettings(
        request: Novu.UpdateWidgetSettingsRequestDto
    ): Promise<Novu.EnvironmentResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/environments/widget/settings"),
            method: "PUT",
            body: await serializers.UpdateWidgetSettingsRequestDto.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.EnvironmentResponseDto.parseOrThrow(
                _response.body as serializers.EnvironmentResponseDto.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }
}

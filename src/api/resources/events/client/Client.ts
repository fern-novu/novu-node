/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Novu } from "@fern-api/novu";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Events {
    interface Options {
        environment: environments.NovuEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Events {
    constructor(private readonly options: Events.Options) {}

    /**
     *
     *     Trigger event is the main (and the only) way to send notification to subscribers.
     *     The trigger identifier is used to match the particular template associated with it.
     *     Additional information can be passed according the body interface below.
     *
     */
    public async trigger(request: Novu.TriggerEventRequestDto): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/events/trigger"),
            method: "POST",
            headers: {
                "x-api-key": await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.TriggerEventRequestDto.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     *       Using this endpoint you can trigger multiple events at once, to avoid multiple calls to the API.
     *       The bulk API is limited to 100 events per request.
     *
     */
    public async triggerBulk(request: Novu.BulkTriggerEventDto): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/events/trigger/bulk"),
            method: "POST",
            headers: {
                "x-api-key": await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.BulkTriggerEventDto.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Trigger a broadcast event to all existing subscribers, could be used to send announcements, etc.
     *       In the future could be used to trigger events to a subset of subscribers based on defined filters.
     */
    public async broadcastEvent(request: Novu.TriggerEventToAllRequestDto): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/events/trigger/broadcast"),
            method: "POST",
            headers: {
                "x-api-key": await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.TriggerEventToAllRequestDto.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     *     Using a previously generated transactionId during the event trigger,
     *      will cancel any active or pending workflows. This is useful to cancel active digests, delays etc...
     *
     */
    public async cancelEvent(transactionId: string): Promise<boolean> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/events/trigger/${transactionId}`),
            method: "DELETE",
            headers: {
                "x-api-key": await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.events.cancelEvent.Response.parseOrThrow(
                _response.body as serializers.events.cancelEvent.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }
}

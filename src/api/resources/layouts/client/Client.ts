/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Novu } from "@fern-api/novu";
import urlJoin from "url-join";
import * as core from "../../../../core";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Layouts {
    interface Options {
        environment: string;
    }
}

export class Layouts {
    constructor(private readonly options: Layouts.Options) {}

    /**
     * Returns a list of layouts that can be paginated using the `page` query parameter and filtered by the environment where it is executed from the organization the user belongs to.
     */
    public async filter(
        request: Novu.LayoutsControllerFilterLayoutsRequest = {}
    ): Promise<Novu.FilterLayoutsResponseDto> {
        const { page, pageSize, sortBy } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        if (pageSize != null) {
            _queryParams.append("pageSize", pageSize.toString());
        }

        if (sortBy != null) {
            _queryParams.append("sortBy", sortBy);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/layouts"),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.FilterLayoutsResponseDto.parseOrThrow(
                _response.body as serializers.FilterLayoutsResponseDto.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a layout
     */
    public async create(request: Novu.CreateLayoutRequestDto): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/layouts"),
            method: "POST",
            body: await serializers.CreateLayoutRequestDto.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get a layout by its ID
     */
    public async get(layoutId: string): Promise<Novu.GetLayoutResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/layouts/${layoutId}`),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.GetLayoutResponseDto.parseOrThrow(
                _response.body as serializers.GetLayoutResponseDto.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Execute a soft delete of a layout given a certain ID.
     */
    public async delete(layoutId: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/layouts/${layoutId}`),
            method: "DELETE",
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Update the name, content and variables of a layout. Also change it to be default or no.
     */
    public async update(layoutId: string, request: Novu.UpdateLayoutRequestDto): Promise<Novu.UpdateLayoutResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/layouts/${layoutId}`),
            method: "PATCH",
            body: await serializers.UpdateLayoutRequestDto.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.UpdateLayoutResponseDto.parseOrThrow(
                _response.body as serializers.UpdateLayoutResponseDto.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Sets the default layout for the environment and updates to non default to the existing default layout (if any).
     */
    public async setDefault(layoutId: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/layouts/${layoutId}/default`),
            method: "POST",
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Novu } from "@fern-api/novu";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Notification {
    interface Options {
        environment: environments.NovuEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class Notification {
    constructor(private readonly options: Notification.Options) {}

    public async getAll(
        request: Novu.NotificationsControllerGetNotificationsRequest
    ): Promise<Novu.ActivitiesResponseDto> {
        const { search, page, transactionId } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("search", search);
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        if (transactionId != null) {
            _queryParams.append("transactionId", transactionId);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/notifications"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ActivitiesResponseDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getNotificationStats(): Promise<Novu.ActivityStatsResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/notifications/stats"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
        });
        if (_response.ok) {
            return await serializers.ActivityStatsResponseDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getNotificationGraphStats(
        request: Novu.NotificationsControllerGetActivityGraphStatsRequest = {}
    ): Promise<Novu.ActivityGraphStatesResponse[]> {
        const { days } = request;
        const _queryParams = new URLSearchParams();
        if (days != null) {
            _queryParams.append("days", days.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/notifications/graph/stats"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.notification.getNotificationGraphStats.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async get(notificationId: string): Promise<Novu.ActivityNotificationResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/notifications/${notificationId}`),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
        });
        if (_response.ok) {
            return await serializers.ActivityNotificationResponseDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private async _getAuthorizationHeader() {
        const value = await core.Supplier.get(this.options.apiKey);
        if (value != null) {
            return `ApiKey ${value}`;
        }

        return undefined;
    }
}

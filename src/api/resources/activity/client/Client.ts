/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Novu } from "@fern-api/novu";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Activity {
    interface Options {
        environment: environments.NovuEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Activity {
    constructor(private readonly options: Activity.Options) {}

    public async getFeed(request: Novu.ActivityControllerGetActivityFeedRequest): Promise<Novu.ActivitiesResponseDto> {
        const { search, page, transactionId } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("search", search);
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        if (transactionId != null) {
            _queryParams.append("transactionId", transactionId);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/activity"),
            method: "GET",
            headers: {
                "x-api-key": await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ActivitiesResponseDto.parseOrThrow(
                _response.body as serializers.ActivitiesResponseDto.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getActivityStats(): Promise<Novu.ActivityStatsResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/activity/stats"),
            method: "GET",
            headers: {
                "x-api-key": await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.ActivityStatsResponseDto.parseOrThrow(
                _response.body as serializers.ActivityStatsResponseDto.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getActivityGraphStats(
        request: Novu.ActivityControllerGetActivityGraphStatsRequest = {}
    ): Promise<Novu.ActivityGraphStatesResponse[]> {
        const { days } = request;
        const _queryParams = new URLSearchParams();
        if (days != null) {
            _queryParams.append("days", days.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/activity/graph/stats"),
            method: "GET",
            headers: {
                "x-api-key": await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.activity.getActivityGraphStats.Response.parseOrThrow(
                _response.body as serializers.activity.getActivityGraphStats.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Novu } from "@fern-api/novu";
import urlJoin from "url-join";
import * as serializers from "./serialization";
import * as errors from "./errors";
import { InboundParse } from "./api/resources/inboundParse/client/Client";
import { Environments } from "./api/resources/environments/client/Client";
import { NotificationGroups } from "./api/resources/notificationGroups/client/Client";
import { Changes } from "./api/resources/changes/client/Client";
import { Layouts } from "./api/resources/layouts/client/Client";
import { ExecutionDetails } from "./api/resources/executionDetails/client/Client";
import { NotificationTemplates } from "./api/resources/notificationTemplates/client/Client";
import { Integrations } from "./api/resources/integrations/client/Client";
import { Events } from "./api/resources/events/client/Client";
import { Subscribers } from "./api/resources/subscribers/client/Client";
import { Topics } from "./api/resources/topics/client/Client";
import { Activity } from "./api/resources/activity/client/Client";
import { Notification } from "./api/resources/notification/client/Client";
import { Feeds } from "./api/resources/feeds/client/Client";
import { Messages } from "./api/resources/messages/client/Client";

export declare namespace NovuClient {
    interface Options {
        environment: environments.NovuEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class NovuClient {
    constructor(private readonly options: NovuClient.Options) {}

    /**
     *
     *     Trigger event is the main (and the only) way to send notification to subscribers.
     *     The trigger identifier is used to match the particular template associated with it.
     *     Additional information can be passed according the body interface below.
     *
     */
    public async trigger(eventId: string, data: Omit<Novu.TriggerEventRequestDto, "name">): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/events/trigger"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            body: await serializers.TriggerEventRequestDto.jsonOrThrow(
                {
                    name: eventId,
                    to: data.to,
                    payload: {
                        ...data?.payload,
                    },
                    overrides: data.overrides || {},
                    actor: data.actor,
                },
                { unrecognizedObjectKeys: "strip" }
            ),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     *       Using this endpoint you can trigger multiple events at once, to avoid multiple calls to the API.
     *       The bulk API is limited to 100 events per request.
     *
     */
    public async bulkTrigger(request: Novu.BulkTriggerEventDto): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/events/trigger/bulk"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            body: await serializers.BulkTriggerEventDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Trigger a broadcast event to all existing subscribers, could be used to send announcements, etc.
     *       In the future could be used to trigger events to a subset of subscribers based on defined filters.
     */
    public async broadcast(request: Novu.TriggerEventToAllRequestDto): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/events/trigger/broadcast"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            body: await serializers.TriggerEventToAllRequestDto.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.NovuError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NovuError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NovuTimeoutError();
            case "unknown":
                throw new errors.NovuError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private _inboundParse: InboundParse | undefined;

    public get inboundParse(): InboundParse {
        return (this._inboundParse ??= new InboundParse(this.options));
    }

    private _environments: Environments | undefined;

    public get environments(): Environments {
        return (this._environments ??= new Environments(this.options));
    }

    private _notificationGroups: NotificationGroups | undefined;

    public get notificationGroups(): NotificationGroups {
        return (this._notificationGroups ??= new NotificationGroups(this.options));
    }

    private _changes: Changes | undefined;

    public get changes(): Changes {
        return (this._changes ??= new Changes(this.options));
    }

    private _layouts: Layouts | undefined;

    public get layouts(): Layouts {
        return (this._layouts ??= new Layouts(this.options));
    }

    private _executionDetails: ExecutionDetails | undefined;

    public get executionDetails(): ExecutionDetails {
        return (this._executionDetails ??= new ExecutionDetails(this.options));
    }

    private _notificationTemplates: NotificationTemplates | undefined;

    public get notificationTemplates(): NotificationTemplates {
        return (this._notificationTemplates ??= new NotificationTemplates(this.options));
    }

    private _integrations: Integrations | undefined;

    public get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this.options));
    }

    private _events: Events | undefined;

    public get events(): Events {
        return (this._events ??= new Events(this.options));
    }

    private _subscribers: Subscribers | undefined;

    public get subscribers(): Subscribers {
        return (this._subscribers ??= new Subscribers(this.options));
    }

    private _topics: Topics | undefined;

    public get topics(): Topics {
        return (this._topics ??= new Topics(this.options));
    }

    private _activity: Activity | undefined;

    public get activity(): Activity {
        return (this._activity ??= new Activity(this.options));
    }

    private _notification: Notification | undefined;

    public get notification(): Notification {
        return (this._notification ??= new Notification(this.options));
    }

    private _feeds: Feeds | undefined;

    public get feeds(): Feeds {
        return (this._feeds ??= new Feeds(this.options));
    }

    private _messages: Messages | undefined;

    public get messages(): Messages {
        return (this._messages ??= new Messages(this.options));
    }

    private async _getAuthorizationHeader() {
        const value = await core.Supplier.get(this.options.apiKey);
        if (value != null) {
            return `ApiKey ${value}`;
        }

        return undefined;
    }
}
